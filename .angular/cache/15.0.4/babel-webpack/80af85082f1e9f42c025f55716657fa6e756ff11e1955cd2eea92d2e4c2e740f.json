{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseURL = \"http://localhost:8000/api\";\n  }\n  login(email, password) {\n    return this.http.post(this.baseURL + '/login', {\n      email: email,\n      password: password\n    }).pipe(map(result => {\n      alert(result);\n      localStorage.setItem('access_token', result.token);\n      return true;\n    }));\n  }\n  register(email, password, password_confirmation, name) {\n    return this.http.post(this.baseURL + '/login', {\n      email: email,\n      password: password\n    }).pipe(map(result => {\n      alert(result);\n      localStorage.setItem('access_token', result.token);\n      return true;\n    }));\n  }\n  getToken() {\n    return localStorage.getItem('access_token');\n  }\n  logout() {\n    let removeToken = localStorage.removeItem('access_token');\n    if (removeToken == null) {\n      this.router.navigate(['login']);\n    }\n  }\n  get isLoggedIn() {\n    //TODO: Check token expiry and other security checks\n    return localStorage.getItem('access_token') !== null;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,GAAG,QAAQ,gBAAgB;;;;AAMpC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB,EAAQC,MAAc;IAAtC,SAAI,GAAJD,IAAI;IAAoB,WAAM,GAANC,MAAM;IAF1C,YAAO,GAAG,2BAA2B;EAEiB;EAG9DC,KAAK,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAkB,IAAI,CAACC,OAAO,GAAC,QAAQ,EAAE;MAACH,KAAK,EAAEA,KAAK;MAAEC,QAAQ,EAAEA;IAAQ,CAAC,CAAC,CAC9FG,IAAI,CACHV,GAAG,CAACW,MAAM,IAAG;MACXC,KAAK,CAACD,MAAM,CAAC;MACbE,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEH,MAAM,CAACI,KAAK,CAAC;MAClD,OAAO,IAAI;IACb,CAAC,CAAC,CACH;EACL;EAEAC,QAAQ,CAACV,KAAa,EAAEC,QAAgB,EAAEU,qBAA6B,EAAGC,IAAW;IACnF,OAAO,IAAI,CAACf,IAAI,CAACK,IAAI,CAAkB,IAAI,CAACC,OAAO,GAAC,QAAQ,EAAE;MAACH,KAAK,EAAEA,KAAK;MAAEC,QAAQ,EAAEA;IAAQ,CAAC,CAAC,CAC9FG,IAAI,CACHV,GAAG,CAACW,MAAM,IAAG;MACXC,KAAK,CAACD,MAAM,CAAC;MACbE,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEH,MAAM,CAACI,KAAK,CAAC;MAClD,OAAO,IAAI;IACb,CAAC,CAAC,CACH;EACL;EAEAI,QAAQ;IACN,OAAON,YAAY,CAACO,OAAO,CAAC,cAAc,CAAC;EAC7C;EAEAC,MAAM;IACJ,IAAIC,WAAW,GAAGT,YAAY,CAACU,UAAU,CAAC,cAAc,CAAC;IAEzD,IAAID,WAAW,IAAI,IAAI,EAAE;MACvB,IAAI,CAAClB,MAAM,CAACoB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;;EAEnC;EAEA,IAAWC,UAAU;IACnB;IACA,OAAQZ,YAAY,CAACO,OAAO,CAAC,cAAc,CAAC,KAAK,IAAI;EACvD;;AA3CWnB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAyB,SAAXzB,WAAW;EAAA0B,YAFV;AAAM","names":["map","AuthService","constructor","http","router","login","email","password","post","baseURL","pipe","result","alert","localStorage","setItem","token","register","password_confirmation","name","getToken","getItem","logout","removeToken","removeItem","navigate","isLoggedIn","factory","providedIn"],"sourceRoot":"","sources":["D:\\mafcode_angular\\src\\app\\service\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { map } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private baseURL = \"http://localhost:8000/api\";\n\n  constructor(private http: HttpClient,public router: Router) { }\n\n  \n  login(email: string, password: string): Observable<boolean> {\n    return this.http.post<{token: string}>(this.baseURL+'/login', {email: email, password: password})\n      .pipe(\n        map(result => {\n          alert(result);\n          localStorage.setItem('access_token', result.token);\n          return true;\n        })\n      );\n  }\n\n  register(email: string, password: string, password_confirmation: string , name:string): Observable<boolean> {\n    return this.http.post<{token: string}>(this.baseURL+'/login', {email: email, password: password})\n      .pipe(\n        map(result => {\n          alert(result);\n          localStorage.setItem('access_token', result.token);\n          return true;\n        })\n      );\n  }\n\n  getToken() {\n    return localStorage.getItem('access_token');\n  }\n\n  logout() {\n    let removeToken = localStorage.removeItem('access_token');\n\n    if (removeToken == null) {\n      this.router.navigate(['login']);\n    }\n  }\n\n  public get isLoggedIn(): boolean {\n    //TODO: Check token expiry and other security checks\n    return (localStorage.getItem('access_token') !== null);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}