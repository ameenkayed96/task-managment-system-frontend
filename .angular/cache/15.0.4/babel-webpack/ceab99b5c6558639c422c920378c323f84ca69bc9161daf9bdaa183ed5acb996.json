{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseURL = \"http://localhost:8000/api\";\n  }\n  login(email, password) {\n    return this.http.post(this.baseURL + '/login', {\n      email: email,\n      password: password\n    }).pipe(map(result => {\n      if (true) {\n        console.log(result);\n        localStorage.setItem('token', result.token);\n        return true;\n      } else {}\n    }));\n  }\n  register(email, password, password_confirmation, name) {\n    return this.http.post(this.baseURL + '/register', {\n      email: email,\n      password: password,\n      password_confirmation: password_confirmation,\n      name: name\n    }).pipe(map(result => {\n      localStorage.setItem('token', result.token);\n      return true;\n    }));\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  payload(token) {\n    const jwtPayload = token.split('.')[1];\n    return JSON.parse(atob(jwtPayload));\n  }\n  logout() {\n    let removeToken = localStorage.removeItem('token');\n    if (removeToken == null) {\n      this.router.navigate(['login']);\n    }\n  }\n  get isLoggedIn() {\n    //TODO: Check token expiry and other security checks\n    return localStorage.getItem('token') !== null;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,GAAG,QAAQ,gBAAgB;;;;AAOpC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB,EAAQC,MAAc;IAAtC,SAAI,GAAJD,IAAI;IAAoB,WAAM,GAANC,MAAM;IAF1C,YAAO,GAAG,2BAA2B;EAEiB;EAG9DC,KAAK,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAkB,IAAI,CAACC,OAAO,GAAC,QAAQ,EAAE;MAACH,KAAK,EAAEA,KAAK;MAAEC,QAAQ,EAAEA;IAAQ,CAAC,CAAC,CAC9FG,IAAI,CACHV,GAAG,CAACW,MAAM,IAAG;MACX,IAAG,IAAI,EAAC;QACNC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;QACnBG,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,MAAM,CAACK,KAAK,CAAC;QAC3C,OAAO,IAAI;OACZ,MACG;IAGN,CAAC,CAAC,CACH;EACL;EAEAC,QAAQ,CAACX,KAAa,EAAEC,QAAgB,EAAEW,qBAA6B,EAAEC,IAAY;IACnF,OAAO,IAAI,CAAChB,IAAI,CAACK,IAAI,CAAkB,IAAI,CAACC,OAAO,GAAC,WAAW,EAAE;MAACH,KAAK,EAAEA,KAAK;MAAEC,QAAQ,EAAEA,QAAQ;MAAEW,qBAAqB,EAAGA,qBAAqB;MAAEC,IAAI,EAAGA;IAAI,CAAC,CAAC,CAC7JT,IAAI,CACHV,GAAG,CAACW,MAAM,IAAG;MACXG,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,MAAM,CAACK,KAAK,CAAC;MAC3C,OAAO,IAAI;IACb,CAAC,CAAC,CACH;EACL;EAEAI,QAAQ;IACN,OAAON,YAAY,CAACO,OAAO,CAAC,OAAO,CAAC;EACtC;EAIAC,OAAO,CAACN,KAAU;IAChB,MAAMO,UAAU,GAAGP,KAAK,CAACQ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACtC,OAAOC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACJ,UAAU,CAAC,CAAC;EACrC;EAEAK,MAAM;IACJ,IAAIC,WAAW,GAAGf,YAAY,CAACgB,UAAU,CAAC,OAAO,CAAC;IAElD,IAAID,WAAW,IAAI,IAAI,EAAE;MACvB,IAAI,CAACzB,MAAM,CAAC2B,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;;EAEnC;EAEA,IAAWC,UAAU;IACnB;IACA,OAAQlB,YAAY,CAACO,OAAO,CAAC,OAAO,CAAC,KAAK,IAAI;EAChD;;AAtDWpB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAgC,SAAXhC,WAAW;EAAAiC,YAFV;AAAM","names":["map","AuthService","constructor","http","router","login","email","password","post","baseURL","pipe","result","console","log","localStorage","setItem","token","register","password_confirmation","name","getToken","getItem","payload","jwtPayload","split","JSON","parse","atob","logout","removeToken","removeItem","navigate","isLoggedIn","factory","providedIn"],"sourceRoot":"","sources":["D:\\mafcode_angular\\src\\app\\service\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { map } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private baseURL = \"http://localhost:8000/api\";\n\n  constructor(private http: HttpClient,public router: Router) { }\n\n  \n  login(email: string, password: string): Observable<boolean> {\n    return this.http.post<{token: string}>(this.baseURL+'/login', {email: email, password: password})\n      .pipe(\n        map(result => {\n          if(true){\n            console.log(result);\n            localStorage.setItem('token', result.token);\n            return true;\n          }\n          else{\n\n          }\n        })\n      );\n  }\n\n  register(email: string, password: string, password_confirmation: string, name: string): Observable<boolean> {\n    return this.http.post<{token: string}>(this.baseURL+'/register', {email: email, password: password, password_confirmation : password_confirmation, name : name})\n      .pipe(\n        map(result => {\n          localStorage.setItem('token', result.token);\n          return true;\n        })\n      );\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  \n\n  payload(token: any) {\n    const jwtPayload = token.split('.')[1];\n    return JSON.parse(atob(jwtPayload));\n  }\n\n  logout() {\n    let removeToken = localStorage.removeItem('token');\n\n    if (removeToken == null) {\n      this.router.navigate(['login']);\n    }\n  }\n\n  public get isLoggedIn(): boolean {\n    //TODO: Check token expiry and other security checks\n    return (localStorage.getItem('token') !== null);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}