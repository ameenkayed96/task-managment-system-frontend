{"ast":null,"code":"import { catchError, map, throwError } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport class DataService {\n  constructor(httpClient, authService) {\n    this.httpClient = httpClient;\n    this.authService = authService;\n    this.REST_API = 'http://127.0.0.1:8000/api/';\n    this.httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n  }\n  addTask(data) {\n    let API_URL = this.REST_API + 'tasks/create';\n    return this.httpClient.post(API_URL, data).pipe(catchError(this.handleError));\n  }\n  getTasks() {\n    this.httpHeaders = this.httpHeaders.set('Access-Control-Allow-Origin', '*');\n    this.httpHeaders = this.httpHeaders.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n    this.httpHeaders = this.httpHeaders.set('Access-Control-Allow-Origin', '*');\n    this.httpHeaders = this.httpHeaders.set('Authorization', `Bearer ${this.authService.getToken()}`);\n    console.log(this.authService.getToken());\n    let API_URL = this.REST_API + 'tasks';\n    console.log(API_URL);\n    return this.httpClient.get(API_URL).pipe(catchError(this.handleError));\n  }\n  getTask(id) {\n    let API_URL = this.REST_API + 'tasks/' + id;\n    return this.httpClient.post(API_URL, {\n      headers: this.httpHeaders\n    }).pipe(map(res => {\n      return res || {};\n    }), catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    } else {\n      errorMessage = `Error Code : ${error.status}\\n Message : ${error.message}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n}\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n};\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,UAAU,EAAQC,GAAG,EAAcC,UAAU,QAAQ,MAAM;AACpE,SAAsBC,WAAW,QAA4B,sBAAsB;;;;AAOnF,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,UAAuB,EAASC,WAAyB;IAAzD,eAAU,GAAVD,UAAU;IAAsB,gBAAW,GAAXC,WAAW;IAH/D,aAAQ,GAAY,4BAA4B;IAEhD,gBAAW,GAAG,IAAIJ,WAAW,EAAE,CAACK,GAAG,CAAC,cAAc,EAAC,kBAAkB,CAAC;EACW;EAEjFC,OAAO,CAACC,IAAO;IACb,IAAIC,OAAO,GAAG,IAAI,CAACC,QAAQ,GAAG,cAAc;IAC5C,OAAO,IAAI,CAACN,UAAU,CAACO,IAAI,CAACF,OAAO,EAACD,IAAI,CAAC,CAACI,IAAI,CAACd,UAAU,CAAC,IAAI,CAACe,WAAW,CAAC,CAAC;EAC9E;EAEAC,QAAQ;IACN,IAAI,CAACC,WAAW,GAAG,IAAI,CAACA,WAAW,CAACT,GAAG,CAAC,6BAA6B,EAAE,GAAG,CAAC;IAC3E,IAAI,CAACS,WAAW,GAAG,IAAI,CAACA,WAAW,CAACT,GAAG,CAAC,8BAA8B,EAAE,iCAAiC,CAAC;IAC1G,IAAI,CAACS,WAAW,GAAG,IAAI,CAACA,WAAW,CAACT,GAAG,CAAC,6BAA6B,EAAE,GAAG,CAAC;IAC3E,IAAI,CAACS,WAAW,GAAG,IAAI,CAACA,WAAW,CAACT,GAAG,CAAC,eAAe,EAAC,UAAU,IAAI,CAACD,WAAW,CAACW,QAAQ,EAAE,EAAE,CAAC;IAChGC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACb,WAAW,CAACW,QAAQ,EAAE,CAAC;IACxC,IAAIP,OAAO,GAAG,IAAI,CAACC,QAAQ,GAAG,OAAO;IACrCO,OAAO,CAACC,GAAG,CAACT,OAAO,CAAC;IACpB,OAAO,IAAI,CAACL,UAAU,CAACe,GAAG,CAACV,OAAO,CAAE,CAACG,IAAI,CAACd,UAAU,CAAC,IAAI,CAACe,WAAW,CAAC,CAAC;EACzE;EAEAO,OAAO,CAACC,EAAQ;IACd,IAAIZ,OAAO,GAAG,IAAI,CAACC,QAAQ,GAAG,QAAQ,GAAGW,EAAE;IAC3C,OAAO,IAAI,CAACjB,UAAU,CAACO,IAAI,CAACF,OAAO,EAAC;MAAEa,OAAO,EAAG,IAAI,CAACP;IAAW,CAAE,CAAC,CAACH,IAAI,CAACb,GAAG,CAAEwB,GAAO,IAAI;MACvF,OAAOA,GAAG,IAAI,EAAE;IAClB,CAAC,CAAC,EAACzB,UAAU,CAAC,IAAI,CAACe,WAAW,CAAC,CAAC;EAClC;EAIAA,WAAW,CAACW,KAAyB;IACnC,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAGD,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAC;MACnCD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MACG;MACFF,YAAY,GAAG,gBAAgBD,KAAK,CAACI,MAAM,gBAAgBJ,KAAK,CAACG,OAAO,EAAE;;IAE5EV,OAAO,CAACC,GAAG,CAACO,YAAY,CAAC;IACzB,OAAOzB,UAAU,CAACyB,YAAY,CAAC;EACjC;;AA1CWvB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA2B,SAAX3B,WAAW;EAAA4B,YAFV;AAAM","names":["catchError","map","throwError","HttpHeaders","DataService","constructor","httpClient","authService","set","addTask","data","API_URL","REST_API","post","pipe","handleError","getTasks","httpHeaders","getToken","console","log","get","getTask","id","headers","res","error","errorMessage","ErrorEvent","message","status","factory","providedIn"],"sourceRoot":"","sources":["D:\\mafcode_angular\\src\\app\\service\\data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { catchError, from, map, Observable, throwError } from 'rxjs';\nimport { HttpClient , HttpHeaders , HttpErrorResponse } from '@angular/common/http';\nimport { Ad } from '../model/ad';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  REST_API : string = 'http://127.0.0.1:8000/api/';\n\n  httpHeaders = new HttpHeaders().set('Content-Type','application/json');\n  constructor(private httpClient : HttpClient,private authService : AuthService) { }\n\n  addTask(data:Ad) : Observable<any>{\n    let API_URL = this.REST_API + 'tasks/create';\n    return this.httpClient.post(API_URL,data).pipe(catchError(this.handleError));\n  }\n\n  getTasks() : Observable<any>{\n    this.httpHeaders = this.httpHeaders.set('Access-Control-Allow-Origin', '*');\n    this.httpHeaders = this.httpHeaders.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n    this.httpHeaders = this.httpHeaders.set('Access-Control-Allow-Origin', '*');\n    this.httpHeaders = this.httpHeaders.set('Authorization',`Bearer ${this.authService.getToken()}`);\n    console.log(this.authService.getToken());\n    let API_URL = this.REST_API + 'tasks';\n    console.log(API_URL);\n    return this.httpClient.get(API_URL,).pipe(catchError(this.handleError));\n  }\n\n  getTask(id : any) : Observable<any>{\n    let API_URL = this.REST_API + 'tasks/' + id;\n    return this.httpClient.post(API_URL,{ headers : this.httpHeaders }).pipe(map((res:any) => {\n      return res || {};\n    }),catchError(this.handleError));\n  }\n\n  \n\n  handleError(error : HttpErrorResponse){\n    let errorMessage = '';\n    if(error.error instanceof ErrorEvent){\n      errorMessage = error.error.message;\n    }\n    else{\n      errorMessage = `Error Code : ${error.status}\\n Message : ${error.message}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}