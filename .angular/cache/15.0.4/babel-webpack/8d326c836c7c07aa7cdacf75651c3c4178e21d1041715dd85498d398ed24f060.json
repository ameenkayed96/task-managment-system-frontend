{"ast":null,"code":"import { catchError, map, throwError } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.REST_API = 'htttp://127.0.0.1:8000/api/ads';\n    this.httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n  }\n  addAds(data) {\n    let API_URL = this.REST_API;\n    return this.httpClient.post(API_URL, data).pipe(catchError(this.handleError));\n  }\n  getAds() {\n    let API_URL = this.REST_API;\n    return this.httpClient.get(API_URL).pipe(catchError(this.handleError));\n  }\n  getAd(id) {\n    let API_URL = this.REST_API + '/' + id;\n    return this.httpClient.post(API_URL, {\n      headers: this.httpHeaders\n    }).pipe(map(res => {\n      return res || {};\n    }), catchError(this.handleError));\n  }\n  updateAd(id, data) {\n    let API_URL = this.REST_API + '/' + id;\n    return this.httpClient.post(API_URL, data, {\n      headers: this.httpHeaders\n    }).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    } else {\n      errorMessage = `Error Code : ${error.status}\\n Message : ${error.message}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n}\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n};\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,UAAU,EAAQC,GAAG,EAAcC,UAAU,QAAQ,MAAM;AACpE,SAAsBC,WAAW,QAA4B,sBAAsB;;;AAMnF,OAAM,MAAOC,WAAW;EAMtBC,YAAoBC,UAAuB;IAAvB,eAAU,GAAVA,UAAU;IAJ9B,aAAQ,GAAY,gCAAgC;IAEpD,gBAAW,GAAG,IAAIH,WAAW,EAAE,CAACI,GAAG,CAAC,cAAc,EAAC,kBAAkB,CAAC;EAEvB;EAE/CC,MAAM,CAACC,IAAO;IACZ,IAAIC,OAAO,GAAG,IAAI,CAACC,QAAQ;IAC3B,OAAO,IAAI,CAACL,UAAU,CAACM,IAAI,CAACF,OAAO,EAACD,IAAI,CAAC,CAACI,IAAI,CAACb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAAC;EAC9E;EAEAC,MAAM;IACJ,IAAIL,OAAO,GAAG,IAAI,CAACC,QAAQ;IAC3B,OAAO,IAAI,CAACL,UAAU,CAACU,GAAG,CAACN,OAAO,CAAC,CAACG,IAAI,CAACb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAAC;EACxE;EAEAG,KAAK,CAACC,EAAQ;IACZ,IAAIR,OAAO,GAAG,IAAI,CAACC,QAAQ,GAAG,GAAG,GAAGO,EAAE;IACtC,OAAO,IAAI,CAACZ,UAAU,CAACM,IAAI,CAACF,OAAO,EAAC;MAAES,OAAO,EAAG,IAAI,CAACC;IAAW,CAAE,CAAC,CAACP,IAAI,CAACZ,GAAG,CAAEoB,GAAO,IAAI;MACvF,OAAOA,GAAG,IAAI,EAAE;IAClB,CAAC,CAAC,EAACrB,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAAC;EAClC;EAEAQ,QAAQ,CAACJ,EAAQ,EAAET,IAAS;IAC1B,IAAIC,OAAO,GAAG,IAAI,CAACC,QAAQ,GAAG,GAAG,GAAGO,EAAE;IACtC,OAAO,IAAI,CAACZ,UAAU,CAACM,IAAI,CAACF,OAAO,EAACD,IAAI,EAAC;MAAEU,OAAO,EAAG,IAAI,CAACC;IAAW,CAAE,CAAC,CAACP,IAAI,CAACb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAAC;EAC7G;EAEAA,WAAW,CAACS,KAAyB;IACnC,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAGD,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAC;MACnCD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MACG;MACFF,YAAY,GAAG,gBAAgBD,KAAK,CAACI,MAAM,gBAAgBJ,KAAK,CAACG,OAAO,EAAE;;IAE5EE,OAAO,CAACC,GAAG,CAACL,YAAY,CAAC;IACzB,OAAOtB,UAAU,CAACsB,YAAY,CAAC;EACjC;;AAxCWpB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA0B,SAAX1B,WAAW;EAAA2B,YAFV;AAAM","names":["catchError","map","throwError","HttpHeaders","DataService","constructor","httpClient","set","addAds","data","API_URL","REST_API","post","pipe","handleError","getAds","get","getAd","id","headers","httpHeaders","res","updateAd","error","errorMessage","ErrorEvent","message","status","console","log","factory","providedIn"],"sourceRoot":"","sources":["D:\\mafcode_angular\\src\\app\\service\\data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { catchError, from, map, Observable, throwError } from 'rxjs';\nimport { HttpClient , HttpHeaders , HttpErrorResponse } from '@angular/common/http';\nimport { Ad } from '../model/ad';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  REST_API : string = 'htttp://127.0.0.1:8000/api/ads';\n\n  httpHeaders = new HttpHeaders().set('Content-Type','application/json');\n\n  constructor(private httpClient : HttpClient) { }\n\n  addAds(data:Ad) : Observable<any>{\n    let API_URL = this.REST_API;\n    return this.httpClient.post(API_URL,data).pipe(catchError(this.handleError));\n  }\n\n  getAds() : Observable<any>{\n    let API_URL = this.REST_API;\n    return this.httpClient.get(API_URL).pipe(catchError(this.handleError));\n  }\n\n  getAd(id : any) : Observable<any>{\n    let API_URL = this.REST_API + '/' + id;\n    return this.httpClient.post(API_URL,{ headers : this.httpHeaders }).pipe(map((res:any) => {\n      return res || {};\n    }),catchError(this.handleError));\n  }\n\n  updateAd(id : any, data : Ad) : Observable<any>{\n    let API_URL = this.REST_API + '/' + id;\n    return this.httpClient.post(API_URL,data,{ headers : this.httpHeaders }).pipe(catchError(this.handleError));\n  }\n\n  handleError(error : HttpErrorResponse){\n    let errorMessage = '';\n    if(error.error instanceof ErrorEvent){\n      errorMessage = error.error.message;\n    }\n    else{\n      errorMessage = `Error Code : ${error.status}\\n Message : ${error.message}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}