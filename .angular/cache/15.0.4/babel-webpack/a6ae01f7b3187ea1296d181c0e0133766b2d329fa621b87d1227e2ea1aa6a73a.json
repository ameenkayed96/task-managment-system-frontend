{"ast":null,"code":"import { catchError, map, throwError } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport class DataService {\n  constructor(httpClient, authService) {\n    this.httpClient = httpClient;\n    this.authService = authService;\n    this.REST_API = 'http://127.0.0.1:8000/api/';\n  }\n  addTask(data) {\n    const requestOptions = {\n      headers: this.httpHeaders\n    };\n    let API_URL = this.REST_API + 'tasks/create';\n    return this.httpClient.post(API_URL, data, requestOptions);\n  }\n  getTasks(page, search) {\n    this.setHeaders();\n    const requestOptions = {\n      headers: this.httpHeaders\n    };\n    let API_URL = this.REST_API + 'tasks' + \"/?page=\" + page + \"&search=\" + search;\n    return this.httpClient.get(API_URL, requestOptions);\n  }\n  getAllTasks() {\n    const requestOptions = {\n      headers: this.httpHeaders\n    };\n    let API_URL = this.REST_API + 'tasks/all/tasks';\n    return this.httpClient.get(API_URL, requestOptions);\n  }\n  getCategories() {\n    const requestOptions = {\n      headers: this.httpHeaders\n    };\n    let API_URL = this.REST_API + 'categories';\n    return this.httpClient.get(API_URL, requestOptions).pipe(catchError(this.handleError));\n  }\n  getTask(id) {\n    const requestOptions = {\n      headers: this.httpHeaders\n    };\n    let API_URL = this.REST_API + 'tasks/' + id;\n    return this.httpClient.get(API_URL, requestOptions).pipe(map(res => {\n      return res || {};\n    }), catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    } else {\n      errorMessage = `Error Code : ${error.status}\\n Message : ${error.message}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n  setHeaders() {\n    this.httpHeaders = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${this.authService.getToken()}`\n    });\n  }\n}\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n};\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["catchError","map","throwError","HttpHeaders","DataService","constructor","httpClient","authService","addTask","data","requestOptions","headers","httpHeaders","API_URL","REST_API","post","getTasks","page","search","setHeaders","get","getAllTasks","getCategories","pipe","handleError","getTask","id","res","error","errorMessage","ErrorEvent","message","status","console","log","getToken","factory","providedIn"],"sourceRoot":"","sources":["D:\\mafcode_angular\\src\\app\\service\\data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { catchError, from, map, Observable, throwError } from 'rxjs';\nimport { HttpClient , HttpHeaders , HttpErrorResponse } from '@angular/common/http';\nimport { AuthService } from './auth.service';\nimport { OnInit } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  REST_API : string = 'http://127.0.0.1:8000/api/';\n  httpHeaders :any;\n  \n  \n  constructor(private httpClient : HttpClient,private authService : AuthService) {     \n  }\n\n  addTask(data:any) : Observable<any>{\n    const requestOptions = { headers: this.httpHeaders };\n    let API_URL = this.REST_API + 'tasks/create';\n    return this.httpClient.post(API_URL,data,requestOptions);\n  }\n\n  getTasks(page : number , search : string) : Observable<any>{\n    this.setHeaders();\n    const requestOptions = { headers: this.httpHeaders };\n    let API_URL = this.REST_API  + 'tasks'+ \"/?page=\" + page + \"&search=\"+search;\n    return this.httpClient.get(API_URL,requestOptions);\n  }\n\n  getAllTasks() : Observable<any>{\n    const requestOptions = { headers: this.httpHeaders };\n    let API_URL = this.REST_API  + 'tasks/all/tasks';\n    return this.httpClient.get(API_URL,requestOptions);\n  }\n\n  getCategories() : Observable<any>{\n    const requestOptions = { headers: this.httpHeaders };\n    let API_URL = this.REST_API + 'categories';\n    return this.httpClient.get(API_URL,requestOptions).pipe(catchError(this.handleError));\n  }\n\n  getTask(id : any) : Observable<any>{\n    const requestOptions = { headers: this.httpHeaders };\n    let API_URL = this.REST_API + 'tasks/' + id;\n    return this.httpClient.get(API_URL,requestOptions).pipe(map((res:any) => {\n      return res || {};\n    }),catchError(this.handleError));\n  }\n\n  \n\n  handleError(error : HttpErrorResponse){\n    let errorMessage = '';\n    if(error.error instanceof ErrorEvent){\n      errorMessage = error.error.message;\n    }\n    else{\n      errorMessage = `Error Code : ${error.status}\\n Message : ${error.message}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n\n  setHeaders(){\n    this.httpHeaders = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${this.authService.getToken()}`\n    });\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}