{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router, handleError) {\n    this.http = http;\n    this.router = router;\n    this.handleError = handleError;\n    this.baseURL = \"http://localhost:8000/api\";\n  }\n  login(email, password) {\n    return this.http.post(this.baseURL + '/login', {\n      email: email,\n      password: password\n    }).pipe(catchError(this.handleError('addHero', hero)));\n  }\n  getToken() {\n    return localStorage.getItem('access_token');\n  }\n  logout() {\n    let removeToken = localStorage.removeItem('access_token');\n    if (removeToken == null) {\n      this.router.navigate(['login']);\n    }\n  }\n  get isLoggedIn() {\n    //TODO: Check token expiry and other security checks\n    return localStorage.getItem('access_token') !== null;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i0.ErrorHandler));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,UAAU,QAAe,gBAAgB;;;;AAOlD,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB,EAAQC,MAAc,EAAQC,WAA0B;IAAxE,SAAI,GAAJF,IAAI;IAAoB,WAAM,GAANC,MAAM;IAAgB,gBAAW,GAAXC,WAAW;IAFrE,YAAO,GAAG,2BAA2B;EAEmD;EAGhGC,KAAK,CAACC,KAAa,EAAEC,QAAgB;IAEnC,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAkB,IAAI,CAACC,OAAO,GAAC,QAAQ,EAAE;MAACH,KAAK,EAAEA,KAAK;MAAEC,QAAQ,EAAEA;IAAQ,CAAC,CAAC,CAC9FG,IAAI,CACHX,UAAU,CAAC,IAAI,CAACK,WAAW,CAAC,SAAS,EAAEO,IAAI,CAAC,CAAC,CAC9C;EACL;EAEAC,QAAQ;IACN,OAAOC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAC7C;EAEAC,MAAM;IACJ,IAAIC,WAAW,GAAGH,YAAY,CAACI,UAAU,CAAC,cAAc,CAAC;IAEzD,IAAID,WAAW,IAAI,IAAI,EAAE;MACvB,IAAI,CAACb,MAAM,CAACe,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;;EAEnC;EAEA,IAAWC,UAAU;IACnB;IACA,OAAQN,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,KAAK,IAAI;EACvD;;AA7BWd,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAoB,SAAXpB,WAAW;EAAAqB,YAFV;AAAM","names":["catchError","AuthService","constructor","http","router","handleError","login","email","password","post","baseURL","pipe","hero","getToken","localStorage","getItem","logout","removeToken","removeItem","navigate","isLoggedIn","factory","providedIn"],"sourceRoot":"","sources":["D:\\mafcode_angular\\src\\app\\service\\auth.service.ts"],"sourcesContent":["import { ErrorHandler, Injectable } from '@angular/core';\nimport { HttpClient} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { map } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private baseURL = \"http://localhost:8000/api\";\n\n  constructor(private http: HttpClient,public router: Router,public handleError : ErrorHandler) { }\n\n  \n  login(email: string, password: string): Observable<boolean> {\n\n    return this.http.post<{token: string}>(this.baseURL+'/login', {email: email, password: password})\n      .pipe(\n        catchError(this.handleError('addHero', hero))\n      );\n  }\n\n  getToken() {\n    return localStorage.getItem('access_token');\n  }\n\n  logout() {\n    let removeToken = localStorage.removeItem('access_token');\n\n    if (removeToken == null) {\n      this.router.navigate(['login']);\n    }\n  }\n\n  public get isLoggedIn(): boolean {\n    //TODO: Check token expiry and other security checks\n    return (localStorage.getItem('access_token') !== null);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}